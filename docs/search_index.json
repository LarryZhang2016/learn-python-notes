[
["index.html", "Learning Python Notes Preface", " Learning Python Notes Lingyun Zhang 2018-11-24 Preface "],
["basics.html", "1 Basics", " 1 Basics "],
["exercises.html", "2 Exercises 2.1 Reverse a string 2.2 Rotate a string 2.3 Finding ‘bookkeeper’ 2.4 Using bisection algorithm 2.5 Reverse pairs and panlindromes 2.6 List and dictionary 2.7 Power, dictionary and bar chart 2.8 Function, list of repeated values 2.9 Simulation, birthday problem 2.10 Simulation, tosses of a fair coin", " 2 Exercises 2.1 Reverse a string Problem: Write a function which accepts a string as its input and returns the reversed string. # version 1 def rever_str_1(s): n = len(s) re = &#39;&#39; while True: n = n - 1 if n &gt;= 0: re = re + s[n] else: break return re # version 2 def rever_str_2(s): return s[::-1] 2.2 Rotate a string Problem: This is Exercise 8.5 of Think Python: “Write a function called rotate_word that takes a string and an integer as parameters, and returns a new string that contains the letters from the original string rotated by the given amount.” NB: Only rotate lowercase letters. def rotate_word(s, shift = 3): n = len(s) new_s = &#39;&#39; if n == 0: print(&quot;The string cannot be empty! None is returned!&quot;) return None else: for i in range(n): d = ord(s[i]) - ord(&#39;a&#39;) if d &gt;= 0 and d &lt;= 25: new_s = new_s + chr((d + shift) % 26 + ord(&#39;a&#39;)) else: new_s = new_s + s[i] return new_s 2.3 Finding ‘bookkeeper’ Problem: (If necessary, download the file words.txt from http://thinkpython2.com/code/words.txt) This is Exercise 9.7 in Think Python. Find all the words having three consecutive double letters from words.txt # helper function def word_2_number(word): n = len(word) if n &lt; 2: return [0] else: result = [0] * (n - 1) for i in range(n - 1): result[i] = ord(word[i + 1]) - ord(word[i]) return result # helper function def number_of_0(a_list): count = 0 for number in a_list: if number == 0: count = count + 1 return count # helper function def positions_of_0(a_list): n = number_of_0(a_list) if n &gt;= 1: result = [0] * n m = len(a_list) c = -1 for i in range(m): if a_list[i] == 0: c = c + 1 result[c] = i return result # helper function def consecutive_diff(a_list): n = len(a_list) if n &lt;= 1: return str(a_list) else: re = &#39;&#39; for i in range(n - 1): re = re + str(a_list[i + 1] - a_list[i]) return re # fhandle = open(&quot;words.txt&quot;) import urllib.request fhandle = urllib.request.urlopen(&quot;http://thinkpython2.com/code/words.txt&quot;) for line in fhandle: # word = line.strip() word = line.decode().strip() number_str = word_2_number(word) n_0 = number_of_0(number_str) if n_0 &lt; 3: next else: p_0 = positions_of_0(number_str) the_str = consecutive_diff(p_0) if &#39;22&#39; in the_str: print(word) 2.4 Using bisection algorithm Problem: This is Exercise 10.10 in Think Python. # using bisection to find if word is in a_list def find_if_in(a_list, word): new_list = sorted(a_list) while True: n = len(new_list) if n == 0: return False elif n == 1: if word == new_list[0]: return True else: return False else: n = n // 2 if word == new_list[n]: return True elif word &gt; new_list[n]: del new_list[:(n + 1)] else: del new_list[n:] 2.5 Reverse pairs and panlindromes Problem: This is Exercise 10.11 in Think Python. # read words.txt in import urllib.request fhandle = urllib.request.urlopen(&quot;http://thinkpython2.com/code/words.txt&quot;) word_set = set() # initialize an empty set rev_word_set = set() for line in fhandle: word = line.decode().strip() word_set.add(word) rev_word_set.add(word[::-1]) the_joint = rev_word_set.intersection(word_set) panlindrome = 0 for word in the_joint: rev_w = word[::-1] if rev_w == word: print(word) panlindrome = panlindrome + 1 print(&quot;There are &quot;, len(the_joint), &quot; reverse pairs. There are &quot;, panlindrome, &quot; panlindromes.&quot;) 2.6 List and dictionary Problem: This is Exercise 12.1 in Think Python. list_1 = [&#39;a&#39;] for i in range(1, 26): list_1 = list_1 + [chr(ord(&#39;a&#39;) + i)] list_2 = [0] * 26 my_dict = dict(list(zip(list_1, list_2))) fhandle = open(&quot;words.txt&quot;) # version 1 # ============================================================================= # for line in fhandle: # word = line.strip() # for letter in my_dict.keys(): # if letter in word: # my_dict[letter] = my_dict[letter] + 1 # ============================================================================= # version 2 for line in fhandle: word = line.strip() for s in word: my_dict[s] = my_dict.get(s, 0) + 1 # count number of letters total = sum(my_dict.values()) for key in my_dict.keys(): my_dict[key] = my_dict[key] / total # find relative frequency import matplotlib.pyplot as plt plt.bar(my_dict.keys(), my_dict.values(), color=&#39;g&#39;) plt.show() #my_dict = sorted(my_dict, key=my_dict.get) 2.7 Power, dictionary and bar chart Problem: Find the exact value of 210000; create a dictionary, which stores the frequencies of the digits (0-9); create a bar chart for the frequencies. import matplotlib.pyplot as plt a = 2 ** 10000 # print(a) s = str(a) freq = dict() for ch in s: if ch not in freq: freq[ch] = 1 else: freq[ch] += 1 plt.bar(freq.keys(), freq.values(), color=&#39;g&#39;) plt.show() 2.8 Function, list of repeated values Problem: Make a function, which returns cumulative sums when an input (a positive integer) is given. def my_cusum(x): # x must be a positive integer the_result = [0] * x # create a list of x 0&#39;s t = 0 for i in range(x): t = t + (i + 1) the_result[i] = t return the_result 2.9 Simulation, birthday problem Problem: Find the the answer to the birthday problem (https://en.wikipedia.org/wiki/Birthday_problem) by simulation. import numpy as np def simu_birthday_problem(N = 10000, people_number = 23): indicator = [0] * N a = np.arange(365) # array([0, 1, ..., 364]) for i in range(N): a_sample = np.random.choice(a, size = people_number, replace = True) b = set(a_sample) if len(a_sample) &gt; len(b): indicator[i] = 1 the_result = sum(indicator) / N return the_result # accuray: truth +- 0.01 with 95% confidence 2.10 Simulation, tosses of a fair coin Problem: Simulate 10000 tosses of a fair coin and plot the relative frequencies. import numpy as np import matplotlib.pyplot as plt def simu_toss_coin(N = 10000): cum_re = [0] * N # cumulative results prop_re = [0] * N popu = np.arange(2) # array([0, 1]) the_sample = np.random.choice(popu, size = N, replace = True) cum_re[0] = the_sample[0] prop_re[0] = cum_re[0] for i in range(1, N): cum_re[i] = cum_re[i - 1] + the_sample[i] prop_re[i] = cum_re[i] / (i + 1) start = N//3 x = np.arange(start, N) plt.plot(x, prop_re[start:N]) epsi = 1 / np.sqrt(N) plt.axhline(0.5 - epsi, color = &quot;red&quot;) # lower limit line plt.axhline(0.5 + epsi, color = &quot;red&quot;) # upper limit line plt.xlabel(&quot;Number of tosses&quot;) plt.ylabel(&quot;Relative frequency of heads&quot;) plt.title(&quot;Simulation of tosses of a fair coin&quot;) plt.grid(True) plt.show() "]
]
